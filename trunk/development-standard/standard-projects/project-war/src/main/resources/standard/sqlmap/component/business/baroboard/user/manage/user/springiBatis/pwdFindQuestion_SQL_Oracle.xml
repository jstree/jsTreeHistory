<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="pwdFindQuestion">
    <typeAlias alias="PasswordFindQuestion" type="standard.mvc.component.business.baroboard.user.vo.PasswordFindQuestion" />

    <sql id="getMetaColumns">
        SELECT C_ID
             , C_PARENTID
             , C_POSITION
             , C_LEFT
             , C_RIGHT
             , C_LEVEL
             , C_TITLE
             , C_TYPE
    </sql>
    
    <sql id="getMetaColumnsForInsert">
        C_ID, C_PARENTID, C_POSITION, C_LEFT, C_RIGHT, C_LEVEL, C_TITLE, C_TYPE
    </sql>
    
    <sql id="getAllDatasForInsert">
        S_USER_PWD_FIND_QUESTION.NEXTVAL, #c_parentid#, #c_position#, #c_left#, #c_right#, #c_level#, #c_title#, #c_type#
    </sql>

    
    <select id="getChildNode" parameterClass="PasswordFindQuestion" resultClass="PasswordFindQuestion">
        /* getChildNode */
        <include refid="getMetaColumns" />
          FROM T_USER_PWD_FIND_QUESTION
         WHERE C_PARENTID = #c_id#
      ORDER BY C_POSITION ASC
    </select>

    <select id="getChildNodeByLeftRight" parameterClass="PasswordFindQuestion" resultClass="PasswordFindQuestion">
        /* getChildNodeByLeftRight */
        <include refid="getMetaColumns" />
          FROM T_USER_PWD_FIND_QUESTION
         WHERE C_LEFT &gt;= #c_left# 
           AND C_RIGHT &lt;= #c_right# 
      ORDER BY C_LEFT ASC
    </select>

    <select id="searchNodeByString" parameterClass="PasswordFindQuestion" resultClass="PasswordFindQuestion">
        /* searchNodeByString */
        SELECT C_LEFT
             , C_RIGHT
          FROM T_USER_PWD_FIND_QUESTION
         WHERE C_TITLE LIKE '%' || #searchStr# || '%' 
    </select>

    <select id="searchNodeByPosition" parameterClass="java.util.List" resultClass="String">
        /* searchNodeByPosition */
        SELECT DISTINCT C_ID
          FROM T_USER_PWD_FIND_QUESTION
         WHERE 1=1
        <iterate prepend="AND" open="(" close=")" conjunction="OR">
            ( C_LEFT &lt;= #[].c_left# AND C_RIGHT &gt;= #[].c_right# )
        </iterate>
    </select>

    <update id="alterNode" parameterClass="PasswordFindQuestion">
        /* alterNode */
        UPDATE T_USER_PWD_FIND_QUESTION
           SET C_TYPE = #c_type#
             , C_TITLE = #c_title#
         WHERE C_ID = #c_id#
    </update>

    <select id="getNode" parameterClass="PasswordFindQuestion" resultClass="PasswordFindQuestion">
        /* getNode */
        <include refid="getMetaColumns" />
          FROM T_USER_PWD_FIND_QUESTION 
         WHERE C_ID = #c_id#
    </select>

    <select id="getNodeByRef" parameterClass="PasswordFindQuestion" resultClass="PasswordFindQuestion">
        /* getNodeByRef */
        <include refid="getMetaColumns" />
          FROM T_USER_PWD_FIND_QUESTION 
         WHERE C_ID = #ref#
    </select>

    <delete id="removeNode" parameterClass="PasswordFindQuestion">
        /* removeNode */
        DELETE FROM T_USER_PWD_FIND_QUESTION 
              WHERE C_LEFT  &gt;= #c_left#
                AND C_RIGHT &lt;= #c_right#
    </delete>
    
    <update id="removedAfterLeftFix" parameterClass="PasswordFindQuestion">
        /* removedAfterLeftFix */
        UPDATE T_USER_PWD_FIND_QUESTION 
           SET C_LEFT = C_LEFT - #spaceOfTargetNode# 
         WHERE C_LEFT &gt; #c_right#
    </update>
    
    <update id="removedAfterRightFix" parameterClass="PasswordFindQuestion">
        /* removedAfterRightFix */
        UPDATE T_USER_PWD_FIND_QUESTION 
           SET C_RIGHT = C_RIGHT - #spaceOfTargetNode# 
         WHERE C_RIGHT &gt; #c_left#
    </update>
    
    <update id="removedAfterPositionFix" parameterClass="PasswordFindQuestion">
        /* removedAfterPositionFix */
         UPDATE T_USER_PWD_FIND_QUESTION 
            SET C_POSITION = C_POSITION - 1 
          WHERE C_PARENTID = #c_parentid# 
            AND C_POSITION &gt; #c_position#
    </update>

    <select id="analyzeRootNode" resultClass="PasswordFindQuestion">
        /* analyzeRootNode */
        SELECT C_LEFT 
          FROM T_USER_PWD_FIND_QUESTION 
         WHERE C_PARENTID = 0
    </select>

    <update id="cutMyselfPositionFix" parameterClass="PasswordFindQuestion">
        /* cutMyselfPositionFix */
        UPDATE T_USER_PWD_FIND_QUESTION 
           SET C_POSITION = C_POSITION - 1 
         WHERE C_PARENTID = #c_parentid# 
           AND C_POSITION &gt; #c_position#
    </update>

    <update id="cutMyselfLeftFix" parameterClass="PasswordFindQuestion">
        /* cutMyselfLeftFix */
        UPDATE T_USER_PWD_FIND_QUESTION 
           SET C_LEFT = C_LEFT - #spaceOfTargetNode# 
         WHERE C_LEFT &gt; #c_right#
    </update>
    
    <update id="cutMyselfRightFix" parameterClass="PasswordFindQuestion">
        /* cutMyselfRightFix */
        UPDATE T_USER_PWD_FIND_QUESTION 
           SET C_RIGHT = C_RIGHT - #spaceOfTargetNode# 
         WHERE C_RIGHT &gt; #c_left#
        <iterate prepend="AND C_ID NOT IN" property="c_idsByChildNodeFromNodeById" open="(" close=")" conjunction=",">
            #c_idsByChildNodeFromNodeById[]#
        </iterate>
    </update>

    <update id="stretchPositionForMyself" parameterClass="PasswordFindQuestion">
        /* stretchPositionForMyself */
        UPDATE T_USER_PWD_FIND_QUESTION
           SET C_POSITION = C_POSITION + 1
         WHERE C_PARENTID = #ref# AND C_POSITION &gt;= #c_position#
        <isEqual property="copy" compareValue="0">
           AND C_ID NOT IN
            <isEmpty property="c_idsByChildNodeFromNodeById">
                (-1)
            </isEmpty>
            <isNotEmpty property="c_idsByChildNodeFromNodeById">
                <iterate property="c_idsByChildNodeFromNodeById" open="(" close=")" conjunction=",">
                    #c_idsByChildNodeFromNodeById[]#
                </iterate>
            </isNotEmpty>
        </isEqual>
    </update>

    <update id="stretchLeftForMyselfFromJstree" parameterClass="PasswordFindQuestion">
        /* stretchLeftForMyselfFromJstree */
           UPDATE T_USER_PWD_FIND_QUESTION 
              SET C_LEFT = C_LEFT + #spaceOfTargetNode# 
            WHERE C_LEFT &gt;= #rightPositionFromNodeByRef#
        <isEqual property="copy" compareValue="0">
            <isNotEmpty property="c_idsByChildNodeFromNodeById">
                <iterate prepend="AND C_ID NOT IN" property="c_idsByChildNodeFromNodeById" open="(" close=")" conjunction=",">
                    #c_idsByChildNodeFromNodeById[]#
                </iterate>
            </isNotEmpty>
        </isEqual>
    </update>

    <update id="stretchRightForMyselfFromJstree" parameterClass="PasswordFindQuestion">
        /* stretchRightForMyselfFromJstree */
        UPDATE T_USER_PWD_FIND_QUESTION 
           SET C_RIGHT = C_RIGHT + #spaceOfTargetNode# 
         WHERE C_RIGHT &gt;= #rightPositionFromNodeByRef#
        <isEqual property="copy" compareValue="0">
            <isNotEmpty property="c_idsByChildNodeFromNodeById">
                <iterate prepend="AND C_ID NOT IN" property="c_idsByChildNodeFromNodeById" open="(" close=")" conjunction=",">
                    #c_idsByChildNodeFromNodeById[]#
                </iterate>
            </isNotEmpty>
        </isEqual>
    </update>

    <insert id="pasteMyselfFromJstree" parameterClass="PasswordFindQuestion">
        /* pasteMyselfFromJstree */
        INSERT INTO T_USER_PWD_FIND_QUESTION ( 
            <include refid="getMetaColumnsForInsert" />
        )
        SELECT S_USER_PWD_FIND_QUESTION.NEXTVAL AS C_ID
             , A.*
          FROM 
          (
              SELECT #ref#
                   , C_POSITION
                   , C_LEFT  - #idifLeft#  AS C_LEFT
                   , C_RIGHT - #idifRight# AS C_RIGHT
                   , C_LEVEL - #ldif#      AS C_LEVEL
                   , C_TITLE
                   , C_TYPE
                FROM T_USER_PWD_FIND_QUESTION 
        <iterate prepend="WHERE C_ID IN" property="c_idsByChildNodeFromNodeById" open="(" close=")" conjunction=",">
            #c_idsByChildNodeFromNodeById[]#
        </iterate>
           ORDER BY C_LEVEL DESC
               ) A
        <selectKey resultClass="java.lang.Integer">
            /* pasteMyselfFromJstree SEQ */
            SELECT S_USER_PWD_FIND_QUESTION.CURRVAL AS SEQ 
              FROM DUAL
        </selectKey>
    </insert>

    <update id="enterMyselfFixPosition" parameterClass="PasswordFindQuestion">
        /* enterMyselfFixPosition */
        UPDATE T_USER_PWD_FIND_QUESTION 
           SET C_PARENTID = #ref#
             , C_POSITION = #c_position# 
         WHERE C_ID = #c_id#
    </update>
    
    <update id="enterMyselfFixLeftRight" parameterClass="PasswordFindQuestion">
        /* enterMyselfFixLeftRight */
        UPDATE T_USER_PWD_FIND_QUESTION 
           SET C_LEFT  = C_LEFT  - (#idif#)
             , C_RIGHT = C_RIGHT - (#idif#)
             , C_LEVEL = C_LEVEL - (#ldif#)
        <iterate prepend="WHERE C_ID IN" property="c_idsByChildNodeFromNodeById" open="(" close=")" conjunction=",">
               #c_idsByChildNodeFromNodeById[]#
        </iterate>
    </update>

    <insert id="addMyselfFromJstree" parameterClass="PasswordFindQuestion">
        /* addMyselfFromJstree */
        INSERT INTO T_USER_PWD_FIND_QUESTION ( <include refid="getMetaColumnsForInsert" /> )
                         VALUES ( <include refid="getAllDatasForInsert" /> )
        <selectKey resultClass="java.lang.Integer">
            /* addMyselfFromJstree SEQ */
            SELECT S_USER_PWD_FIND_QUESTION.CURRVAL AS SEQ
              FROM DUAL
        </selectKey>
    </insert>

    <update id="alterNodeType" parameterClass="PasswordFindQuestion">
        /* alterNodeType */
        UPDATE T_USER_PWD_FIND_QUESTION 
           SET C_TYPE = #c_type#
         WHERE C_ID = #c_id#
    </update>

    <update id="fixCopyIF" parameterClass="PasswordFindQuestion">
        /* fixCopyIF */
        UPDATE T_USER_PWD_FIND_QUESTION 
           SET C_POSITION = #fixCopyPosition# 
         WHERE C_ID = #fixCopyId#
    </update>

    <update id="fixCopy" parameterClass="PasswordFindQuestion">
        /* fixCopy */
        UPDATE T_USER_PWD_FIND_QUESTION 
           SET C_PARENTID = #fixCopyId# 
         WHERE C_ID = #c_id#
    </update>
</sqlMap>