<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="postsManage">
	<typeAlias alias="PostsManageVO" type="standard.mvc.component.business.baroboard.board.manager.posts.vo.PostsManageVO" />

	<sql id="getMetaField">
		/* getChildNode */
		SELECT A.C_ID
		, A.C_PARENTID
		, A.C_POSITION
		, A.C_LEFT
		, A.C_RIGHT
		, A.C_LEVEL
		, A.C_TITLE
		, A.C_TYPE
		/* user filed add point*/
	</sql>
	<sql id="getInlineChildCount">
		, ( SELECT CASE
		WHEN COUNT(*) &gt; 0 THEN 'InChild'
		ELSE
		'NoChild'
		END AS YesNo
		/* inline table from filed add point*/
	</sql>
	<sql id="getInlineChildCountAfterFrom">
		WHERE B.C_PARENTID = A.C_ID
		) AS childcount
		/* table from filed add point*/
	</sql>
	<sql id="getAfterFrom">
		WHERE A.C_PARENTID = #c_id#
		ORDER BY A.C_POSITION ASC
	</sql>
	
	<select id="getChildNode" parameterClass="PostsManageVO"
		resultClass="PostsManageVO">
		<dynamic>
			<include refid="getMetaField" />
			/* user fields */
			<include refid="getInlineChildCount" />
			/* inline table from filed*/
			FROM T_BOARD_$boardId$ B
			<include refid="getInlineChildCountAfterFrom" />
			/* table from filed*/
			, #boardId# as boardId
			FROM T_BOARD_$boardId$ A
			<include refid="getAfterFrom" />
		</dynamic>
	</select>


	<select id="getChildNodeByLeftRight" parameterClass="PostsManageVO"
		resultClass="PostsManageVO">
		/* getChildNodeByLeftRight */
		SELECT C_ID
			, C_PARENTID
			, C_POSITION
			, C_LEFT
			, C_RIGHT
			, C_LEVEL
			, C_TITLE
			, C_TYPE
		FROM T_BOARD_$boardId$
		WHERE C_LEFT &gt;= #c_left#
			AND C_RIGHT &lt;= #c_right#
		ORDER BY C_LEFT ASC
	</select>


	<select id="searchNodeByString" parameterClass="PostsManageVO"
		resultClass="PostsManageVO">
		/* searchNodeByString */
		SELECT c_left
			, c_right
		FROM T_BOARD_$boardId$
		WHERE C_TITLE LIKE '%'||#searchStr#||'%'
	</select>


	<select id="searchNodeByPosition" parameterClass="java.util.List"
		resultClass="String">
		/* searchNodeByPosition */
		SELECT DISTINCT C_ID
		FROM T_BOARD_$boardId$
		WHERE 1=1
		<iterate prepend="AND" open="(" close=")" conjunction="OR">
			( C_LEFT
			&lt;= #[].c_left# AND C_RIGHT &gt;= #[].c_right# )
		</iterate>
	</select>


	<update id="alterNode" parameterClass="PostsManageVO">
		/* alterNode */
		UPDATE T_BOARD_$boardId$
		SET  C_TYPE = #c_type#,
		C_TITLE = #c_title#,
		C_REG_ID = #regId#,  
		C_CONTENT = #content#,  
		C_ALLOW_COMMENT_FL = #allowCommentFl#,  
		C_ALLOW_REPLY_FL = #allowReplyFl#,  
		C_ALERT_RESPONSE_FL = #alertResponseFl#,  
		C_OPEN_ARTICLE_FL = #openArticleFl#,  
		C_ANNOUNCEMENT_FL = #announcementFl#,  
		C_VIEW_CNT = #viewCnt#,  
		C_IS_DELETED_FL = #isDeletedFl#,  
		C_REG_DT = #regDt#,  
		C_MOD_DT = #modDt#,  
		C_ALLOW_TRACKBACK_FL = #allowTrackbackFl#,  
		C_ROOT_ARTICLE_ID = #rootArticleId#			
		WHERE C_ID = #c_id#
	</update>
	
	
	<update id="postsDelete" parameterClass="PostsManageVO">
		/* alterNode */
		UPDATE T_BOARD_$boardId$
		SET  C_IS_DELETED_FL = '1'
			, C_MOD_DT = #modDt# 			
		WHERE C_ID = #c_id#
	</update>


	<select id="getNode" parameterClass="PostsManageVO"
		resultClass="PostsManageVO">
		/* getNode */
		<dynamic>
			<include refid="getMetaField" />
			/* user fields */
			, A.C_REG_ID as regId 			
			, A.C_CONTENT as content 			
			, A.C_ALLOW_COMMENT_FL as allowCommentFL	
			, A.C_ALLOW_REPLY_FL as allowReplyFL	
			, A.C_ALERT_RESPONSE_FL as alertResponseFL
			, A.C_OPEN_ARTICLE_FL as openArticleFL 	
			, A.C_ANNOUNCEMENT_FL as announcementFL 	
			, A.C_VIEW_CNT as viewCnt 			
			, A.C_IS_DELETED_FL as isDeletedFL		
			, A.C_REG_DT as regDt 				
			, A.C_MOD_DT as modDt 
		FROM T_BOARD_$boardId$ A
		WHERE C_ID = #c_id#
		</dynamic>
	</select>


	<select id="getNodeByRef" parameterClass="PostsManageVO"
		resultClass="PostsManageVO">
		<dynamic>
		/* getNodeByRef */
			<include refid="getMetaField" />
			/* user fields */
			, A.C_REG_ID 							
			, A.C_CONTENT 						
			, A.C_ALLOW_COMMENT_FL	
			, A.C_ALLOW_REPLY_FL 		
			, A.C_ALERT_RESPONSE_FL 	
			, A.C_OPEN_ARTICLE_FL 		
			, A.C_ANNOUNCEMENT_FL 	
			, A.C_VIEW_CNT 					
			, A.C_IS_DELETED_FL				
			, A.C_REG_DT 						
			, A.C_MOD_DT 
		FROM T_BOARD_$boardId$ A
		WHERE C_ID = #ref#
		</dynamic>
	</select>


	<delete id="removeNode" parameterClass="PostsManageVO">
		/* removeNode */
		DELETE
		FROM T_BOARD_$boardId$
		WHERE C_LEFT &gt;= #c_left#
			AND C_RIGHT	&lt;= #c_right#
	</delete>


	<update id="removedAfterLeftFix" parameterClass="PostsManageVO">
		/* removedAfterLeftFix */
		UPDATE T_BOARD_$boardId$
		SET C_LEFT = C_LEFT - #spaceOfTargetNode#
		WHERE C_LEFT &gt; #c_right#
	</update>


	<update id="removedAfterRightFix" parameterClass="PostsManageVO">
		/* removedAfterRightFix */
		UPDATE T_BOARD_$boardId$
		SET C_RIGHT = C_RIGHT - #spaceOfTargetNode#
		WHERE C_RIGHT &gt; #c_left#
	</update>


	<update id="removedAfterPositionFix" parameterClass="PostsManageVO">
		/* removedAfterPositionFix */
		UPDATE T_BOARD_$boardId$
		SET	C_POSITION = C_POSITION - 1
		WHERE C_PARENTID = #c_parentid#
			AND	C_POSITION &gt; #c_position#
	</update>


	<select id="analyzeRootNode" resultClass="PostsManageVO">
		/* searchNodeByString */
		SELECT C_LEFT
		FROM T_BOARD_$boardId$
		WHERE C_PARENTID = 0
	</select>


	<update id="cutMyselfPositionFix" parameterClass="PostsManageVO">
		/* cutMyselfPositionFix moveNode case. parameterClass is nodeById*/
		UPDATE T_BOARD_$boardId$
		SET C_POSITION = C_POSITION - 1
		WHERE C_PARENTID = #c_parentid#
			AND C_POSITION &gt;	#c_position#
	</update>


	<update id="cutMyselfLeftFix" parameterClass="PostsManageVO">
		/* cutMyselfLeftFix moveNode case. parameterClass is nodeById*/
		UPDATE T_BOARD_$boardId$
		SET C_LEFT = C_LEFT - #spaceOfTargetNode#
		WHERE C_LEFT &gt; #c_right#
	</update>


	<update id="cutMyselfRightFix" parameterClass="PostsManageVO">
		/* cutMyselfRightFix moveNode case. parameterClass is nodeById*/
		UPDATE T_BOARD_$boardId$
		SET C_RIGHT = C_RIGHT - #spaceOfTargetNode#
		WHERE C_RIGHT &gt; #c_left#
		<iterate prepend="AND C_ID NOT IN" property="c_idsByChildNodeFromNodeById"
			open="(" close=")" conjunction=",">
			#c_idsByChildNodeFromNodeById[]#
		</iterate>
	</update>


	<update id="stretchPositionForMyself" parameterClass="PostsManageVO">
		/* stretchPositionForMyselfFromJstree */
		UPDATE T_BOARD_$boardId$
		SET C_POSITION = C_POSITION + 1
		WHERE C_PARENTID = #ref# AND C_POSITION &gt;= #c_position#
		<isEqual property="copy" compareValue="0">
			AND C_ID NOT IN
			<isEmpty property="c_idsByChildNodeFromNodeById">
				(-1)
			</isEmpty>
			<isNotEmpty property="c_idsByChildNodeFromNodeById">
				<iterate property="c_idsByChildNodeFromNodeById" open="(" close=")" conjunction=",">
					#c_idsByChildNodeFromNodeById[]#
				</iterate>
			</isNotEmpty>
		</isEqual>
	</update>


	<update id="stretchLeftForMyselfFromJstree" parameterClass="PostsManageVO">
		/* stretchLeftForMyselfFromJstree */
		UPDATE T_BOARD_$boardId$
		SET C_LEFT = C_LEFT + #spaceOfTargetNode#
		WHERE C_LEFT &gt;= #rightPositionFromNodeByRef#
		<isEqual property="copy" compareValue="0">
			<isNotEmpty property="c_idsByChildNodeFromNodeById">
				<iterate prepend="AND C_ID NOT IN" property="c_idsByChildNodeFromNodeById"
					open="(" close=")" conjunction=",">
					#c_idsByChildNodeFromNodeById[]#
				</iterate>
			</isNotEmpty>
		</isEqual>
	</update>


	<update id="stretchRightForMyselfFromJstree" parameterClass="PostsManageVO">
		/* stretchRightForMyselfFromJstree */
		UPDATE T_BOARD_$boardId$
		SET C_RIGHT = C_RIGHT + #spaceOfTargetNode#
		WHERE C_RIGHT &gt;= #rightPositionFromNodeByRef#
		<isEqual property="copy" compareValue="0">
			<isNotEmpty property="c_idsByChildNodeFromNodeById">
				<iterate prepend="AND C_ID NOT IN" property="c_idsByChildNodeFromNodeById"
					open="(" close=")" conjunction=",">
					#c_idsByChildNodeFromNodeById[]#
				</iterate>
			</isNotEmpty>
		</isEqual>
	</update>


	<insert id="pasteMyselfFromJstree" parameterClass="PostsManageVO">
		/* pasteMyselfFromJstree */
		INSERT INTO T_BOARD_$boardId$ (
		C_ID, C_PARENTID, C_POSITION,
		C_LEFT, C_RIGHT, C_LEVEL, C_TITLE, C_TYPE
		)
		SELECT S_BOARD_$boardId$.NEXTVAL AS C_ID
		, A.*
		FROM (
			SELECT
			#ref# AS C_PARENTID
			, C_POSITION
			, C_LEFT - #idifLeft# AS C_LEFT
			, C_RIGHT -	#idifRight# AS C_RIGHT
			, C_LEVEL - #ldif# AS C_LEVEL
			, C_TITLE
			, C_TYPE
			FROM T_BOARD_$boardId$
			<iterate prepend="WHERE C_ID IN" property="c_idsByChildNodeFromNodeById"
				open="(" close=")" conjunction=",">
				#c_idsByChildNodeFromNodeById[]#
			</iterate>
			ORDER BY C_LEVEL DESC
		) A
		<selectKey resultClass="java.lang.Integer">
			/* pasteMyselfFromJstree SEQ */
			SELECT S_BOARD_$boardId$.CURRVAL AS SEQ
			FROM DUAL
		</selectKey>
	</insert>


	<update id="enterMyselfFixPosition" parameterClass="PostsManageVO">
		/* enterMyselfFixPosition */
		UPDATE T_BOARD_$boardId$
		SET	C_PARENTID = #ref#
			, C_POSITION = #c_position#
		WHERE C_ID = #c_id#
	</update>


	<update id="enterMyselfFixLeftRight" parameterClass="PostsManageVO">
		/* enterMyselfFixLeftRight */
		UPDATE T_BOARD_$boardId$
		SET	C_LEFT = C_LEFT - (#idif#)
			, C_RIGHT = C_RIGHT - (#idif#)
			, C_LEVEL =
		C_LEVEL - (#ldif#)
		<iterate prepend="WHERE C_ID IN" property="c_idsByChildNodeFromNodeById"
			open="(" close=")" conjunction=",">
			#c_idsByChildNodeFromNodeById[]#
		</iterate>
	</update>

	<insert id="addMyselfFromJstree" parameterClass="ComprehensiveTree">
		/* addMyselfFromJstree */
		INSERT INTO T_BOARD_$boardId$ (
		C_ID, C_PARENTID, C_POSITION,
		C_LEFT, C_RIGHT, C_LEVEL )
		VALUES (
		S_BOARD_$boardId$.NEXTVAL, #c_parentid#, #c_position#,
		#c_left#, #c_right#, #c_level# )
		<selectKey resultClass="java.lang.Integer">
			/* addMyselfFromJstree SEQ */
			SELECT
			S_BOARD_$boardId$.CURRVAL AS SEQ
			FROM DUAL
		</selectKey>
	</insert>

	<update id="alterNodeType" parameterClass="PostsManageVO">
		/* alterNodeType */
		UPDATE T_BOARD_$boardId$
		SET C_TYPE = #c_type#
		WHERE C_ID = #c_id#
	</update>


	<update id="fixCopyIF" parameterClass="PostsManageVO">
		/* fixCopyIF */
		UPDATE T_BOARD_$boardId$
		SET C_POSITION = #fixCopyPosition#
		WHERE C_ID = #fixCopyId#
	</update>


	<update id="fixCopy" parameterClass="PostsManageVO">
		/* fixCopy */
		UPDATE T_BOARD_$boardId$
		SET C_PARENTID = #fixCopyId#
		WHERE C_ID = #c_id#
	</update>
	
	<select id="getPosts" parameterClass="PostsManageVO" resultClass="PostsManageVO">
		SELECT * 
		 FROM (
		SELECT ROWNUM RNUM, A.* 
		 FROM (
			<include refid="getMetaField" />
				, A.C_REG_ID as regId 			
				, A.C_CONTENT as content 			
				, A.C_ALLOW_COMMENT_FL as allowCommentFL	
				, A.C_ALLOW_REPLY_FL as allowReplyFL	
				, A.C_ALERT_RESPONSE_FL as alertResponseFL
				, A.C_OPEN_ARTICLE_FL as openArticleFL 	
				, A.C_ANNOUNCEMENT_FL as  	
				, A.C_VIEW_CNT as viewCnt 		
				, A.LIKE_CNT as likeCnt 		
				, A.C_IS_DELETED_FL as isDeletedFL		
				, A.C_REG_DT as regDt 				
				, A.C_MOD_DT as modDt 	
				, B.C_TITLE as regNickName			
				, A.boardId as boardId
				, A.boardName as boardName
			FROM (
			<iterate property="tableInfo" conjunction="UNION ALL">
				SELECT * FROM (
					SELECT Y.*
					, (SELECT COUNT(*) FROM T_BOARD_$tableInfo[].c_id$_LIKE A WHERE Y.C_ID = A.C_ARTICLE_ID) AS LIKE_CNT
					, #tableInfo[].c_id# as boardId
					, #tableInfo[].c_title# as boardName
					FROM T_BOARD_$tableInfo[].c_id$ Y
					WHERE 1=1
						AND Y.C_LEVEL = 2
						AND Y.C_OPEN_ARTICLE_FL = '1'
						AND Y.C_ANNOUNCEMENT_FL = '0'
						AND Y.C_IS_DELETED_FL = '0'
				)
			</iterate>
			) A, T_USER_INFO B
			WHERE 1=1 
		      AND A.C_REG_ID = B.C_ID
		      <isNotEmpty property="c_title">
		      AND A.C_TITLE LIKE '%'||#c_title#||'%'
		      </isNotEmpty>
		      <isNotEmpty property="regNickName">
		      AND B.C_TITLE LIKE '%'||#regNickName#||'%'
		      </isNotEmpty>
		      <isNotEmpty property="content">
		      AND DBMS_LOB.INSTR(A.C_CONTENT, #content#) &lt;&gt; 0
		      </isNotEmpty>
		      <isNotEmpty property="fromDt">
		      AND A.C_REG_DT BETWEEN #fromDt# AND #toDt#
		      </isNotEmpty>
			ORDER BY C_ID DESC
			) A
			)
			WHERE 1 = 1
		      AND RNUM &gt;= (1 + ((#pageNum# - 1) * #pageSize#))
		      AND RNUM &lt;= (#pageNum# * #pageSize#)
	</select>
	
	<select id="getPostsRightPage" parameterClass="PostsManageVO" resultClass="java.lang.Integer">
		SELECT Count(1) AS COUNT
		 FROM (
		SELECT ROWNUM RNUM, A.* 
		 FROM (
			<include refid="getMetaField" />
				, A.C_REG_ID as regId 			
				, A.C_CONTENT as content 			
				, A.C_ALLOW_COMMENT_FL as allowCommentFL	
				, A.C_ALLOW_REPLY_FL as allowReplyFL	
				, A.C_ALERT_RESPONSE_FL as alertResponseFL
				, A.C_OPEN_ARTICLE_FL as openArticleFL 	
				, A.C_ANNOUNCEMENT_FL as  	
				, A.C_VIEW_CNT as viewCnt 			
				, A.C_IS_DELETED_FL as isDeletedFL		
				, A.C_REG_DT as regDt 				
				, A.C_MOD_DT as modDt 	
				, B.C_TITLE as regNickName			
				, A.boardId as boardId
				, A.boardName as boardName
			FROM (
			<iterate property="tableInfo" conjunction="UNION ALL">
				SELECT * FROM (
					SELECT Y.*
					, #tableInfo[].c_id# as boardId
					, #tableInfo[].c_title# as boardName
					FROM T_BOARD_$tableInfo[].c_id$ Y
					WHERE 1=1
						AND Y.C_LEVEL = 2
						AND Y.C_OPEN_ARTICLE_FL = '1'
						AND Y.C_ANNOUNCEMENT_FL = '0'
						AND Y.C_IS_DELETED_FL = '0'
				)
			</iterate>
			) A, T_USER_INFO B
			WHERE 1=1 
		      AND A.C_REG_ID = B.C_ID
		      <isNotEmpty property="c_title">
		      AND A.C_TITLE LIKE '%'||#c_title#||'%'
		      </isNotEmpty>
		      <isNotEmpty property="regNickName">
		      AND B.C_TITLE LIKE '%'||#regNickName#||'%'
		      </isNotEmpty>
		      <isNotEmpty property="content">
		      AND DBMS_LOB.INSTR(A.C_CONTENT, #content#) &lt;&gt; 0
		      </isNotEmpty>
		      <isNotEmpty property="fromDt">
		      AND A.C_REG_DT BETWEEN #fromDt# AND #toDt#
		      </isNotEmpty>
			ORDER BY C_ID DESC
			) A
			)
			WHERE 1 = 1
		      AND RNUM = #rightNum# 
	</select>
</sqlMap>