/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package egovframework.com.ext.jstree.springiBatis.core.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;

import java.lang.reflect.Field;
import java.util.List;

import org.junit.BeforeClass;
import org.junit.Test;

import egovframework.com.ext.jstree.springiBatis.core.mock.MockCoreDao;
import egovframework.com.ext.jstree.springiBatis.core.vo.ComprehensiveTree;

/**
 * Modification Information
 * 
 * @author 류강하
 * @since 2015. 1. 27.
 * @version 1.0
 * @see <pre>
 *  Class Name  : CoreServiceTest.java
 *  Description : JsTree Spring+iBatis 버젼의 JUnit4 테스트 클래스
 *  Infomation  : 애플리케이션 컨텍스트를 사용하지 않고, DB를 사용하지 않는 Mock DAO를 사용하여 JsTree 코어 서비스를 검증하는 테스트
 * 
 *  << 개정이력(Modification Information) >>
 *  
 *  수정일               수정자                 수정내용
 *  -------       ------------   -----------------------
 *  2015. 1. 27.  류강하                 최초 생성
 * 
 *  Copyright (C) 2015 by 313 DeveloperGroup  All right reserved.
 * </pre>
 */
public class CoreServiceTest {

    private static CoreServiceImpl coreService = new CoreServiceImpl();
    private static MockCoreDao<ComprehensiveTree> mockCoreDao = new MockCoreDao<>();
    
    @BeforeClass
    public static void setUp() throws Exception {

        /* Mock DAO 주입 */
        Field coreDaoField = coreService.getClass().getDeclaredField("coreDao");
        
        coreDaoField.setAccessible(true);
        coreDaoField.set(coreService, mockCoreDao);
        
        /* Root Node 값 검증 */
        // TODO Core Service에 getNode()가 없기 때문에 Core DAO를 직접 사용해야 함.
        ComprehensiveTree rootNode = getNode(1);
        
        assertSame(rootNode.getC_id(), 1);
        assertSame(rootNode.getC_type(), null);
        assertSame(rootNode.getC_left(), 1);
        assertSame(rootNode.getC_right(), 4);
        assertSame(rootNode.getC_position(), 0);
        assertEquals(rootNode.getC_title(), "Root Node");
        assertSame(rootNode.getC_parentid(), 0);
        
        // TODO 또는 getChildNode()의 index n을 사용해서 getNode()의 기능을 대신해야 함.
        List<ComprehensiveTree> childNodesOfRootNode = coreService.getChildNode(rootNode);
        
        assertSame(childNodesOfRootNode.size(), 1);
        
        ComprehensiveTree firstChildNode = childNodesOfRootNode.get(0);
        
        assertSame(firstChildNode.getC_id(), 2);
        assertEquals(firstChildNode.getC_type(), "drive");
        assertSame(firstChildNode.getC_left(), 2);
        assertSame(firstChildNode.getC_right(), 3);
        assertSame(firstChildNode.getC_position(), 0);
        assertEquals(firstChildNode.getC_title(), "First Child Node");
        assertSame(firstChildNode.getC_parentid(), 1);
        
//      I|    L  R
//      1|    1  4 : Root Node
//      2|     23  : First Child Node
    }
    
    private static ComprehensiveTree getNode(int id) throws Exception {
        
        ComprehensiveTree node = new ComprehensiveTree();
        node.setC_id(id);
        
        return mockCoreDao.getNode(node);
    }
    
    @Test
    public void simpleAddNode() throws Exception {
//        
//        /* leaf 노드 추가 테스트 */
//        ComprehensiveTree firstChildNode = getNode(2);
//        
//        // TODO position을 생성해줄 유틸이 필요하여 만듦.
//        int positionOfFirstChildNode = mockCoreDao.generatePosition(firstChildNode);
//        
//        ComprehensiveTree defaultNode = new ComprehensiveTree();
//        defaultNode.setC_type("default");
//        defaultNode.setC_position(positionOfFirstChildNode);
//        defaultNode.setC_title("defaultNode");
//        defaultNode.setRef( firstChildNode.getC_id() );
//        
//        coreService.addNode(defaultNode);
//        
//        ComprehensiveTree defaultNodeStored = coreService.getChildNode(firstChildNode).get(0);
//        
//        assertSame(defaultNodeStored.getC_id(), 3);
//        assertEquals(defaultNodeStored.getC_type(), defaultNode.getC_type());
//        assertSame(defaultNodeStored.getC_left(), 3);
//        assertSame(defaultNodeStored.getC_right(), 4);
//        assertSame(defaultNodeStored.getC_position(), 1);
//        assertEquals(defaultNodeStored.getC_title(), defaultNode.getC_title());
//        assertSame(defaultNodeStored.getC_parentid(), firstChildNode.getC_id());
//        
//        assertSame(firstChildNode.getC_left(), 2);
//        assertSame(firstChildNode.getC_right(), 5);
//        
//        assertSame(rootNodeStored.getC_left(), 1);
//        assertSame(rootNodeStored.getC_right(), 6);
//        
//        
//        
////      I|    L    R
////      1|    1    6 : Root Node
////      2|     2  5  : First Child Node
////      3|      34   : defaultNode
//        
//        /* branch 노드 추가 테스트 */
//        ComprehensiveTree folderNode = new ComprehensiveTree();
//        folderNode.setC_type("folder");
//        folderNode.setC_position( mockCoreDao.generatePosition(firstChildNodeStored) );
//        folderNode.setC_title("folderNode");
//        folderNode.setRef(firstChildNodeStored.getC_id());
//        
//        coreService.addNode(folderNode);
//        
//        ComprehensiveTree folderNodeStored = coreService.getChildNode(firstChildNodeStored).get(1);
//        
//        assertSame(folderNodeStored.getC_id(), 4);
//        assertEquals(folderNodeStored.getC_type(), "folder");
//        assertSame(folderNodeStored.getC_left(), 5);
//        assertSame(folderNodeStored.getC_right(), 6);
//        assertSame(folderNodeStored.getC_position(), 2);
//        assertEquals(folderNodeStored.getC_title(), "folderNode");
//        assertSame(folderNodeStored.getC_parentid(), firstChildNodeStored.getC_id());
//        
//        assertSame(rootNodeStored.getC_left(), 1);
//        assertSame(rootNodeStored.getC_right(), 8);
//        
//        assertSame(firstChildNodeStored.getC_left(), 2);
//        assertSame(firstChildNodeStored.getC_right(), 7);
//        
////      I|    L    R
////      1|    1    8 : Root Node
////      2|     2  7  : First Child Node
////      3|      34   : defaultNode
////      4|      56   : folderNode
//        
//        /* leaf 노드 삭제 테스트 */
//        coreService.removeNode(defaultNodeStored);
//
//        assertNull(mockCoreDao.getNode(defaultNodeStored));
//        
//        assertSame(coreService.getChildNode(firstChildNodeStored).size(), 1);
//        
//        assertSame(folderNodeStored.getC_left(), 3);
//        assertSame(folderNodeStored.getC_right(), 4);
//        assertSame(folderNodeStored.getC_position(), 1);
//        
//        assertSame(rootNodeStored.getC_left(), 1);
//        assertSame(rootNodeStored.getC_right(), 6);
//        
//        assertSame(firstChildNodeStored.getC_left(), 2);
//        assertSame(firstChildNodeStored.getC_right(), 5);
//        
////      I|    L    R
////      1|    1    6 : Root Node
////      2|     2  5  : First Child Node
////      4|      34   : folderNode
//        
//        /* branch 노드에 leaf 노드 추가 테스트 */
//        defaultNode = new ComprehensiveTree();
//        defaultNode.setC_type("default");
//        defaultNode.setC_position( mockCoreDao.generatePosition(folderNodeStored) );
//        defaultNode.setC_title("defaultNode");
//        defaultNode.setRef(folderNodeStored.getC_id());
//        
//        coreService.addNode(defaultNode);
//        
//        defaultNodeStored = coreService.getChildNode(folderNodeStored).get(0);
//        
//        assertSame(defaultNodeStored.getC_id(), 5);
//        assertEquals(defaultNodeStored.getC_type(), "default");
//        assertSame(defaultNodeStored.getC_left(), 4);
//        assertSame(defaultNodeStored.getC_right(), 5);
//        assertSame(defaultNodeStored.getC_position(), 1);
//        assertEquals(defaultNodeStored.getC_title(), "defaultNode");
//        assertSame(defaultNodeStored.getC_parentid(), folderNodeStored.getC_id());
//        
//        assertSame(rootNodeStored.getC_left(), 1);
//        assertSame(rootNodeStored.getC_right(), 8);
//        
//        assertSame(firstChildNodeStored.getC_left(), 2);
//        assertSame(firstChildNodeStored.getC_right(), 7);
//        
//        assertSame(folderNodeStored.getC_left(), 3);
//        assertSame(folderNodeStored.getC_right(), 6);
//        
////      I|    L      R
////      1|    1      8 : Root Node
////      2|     2    7  : First Child Node
////      4|      3  6   : folderNode
////      5|       45    : defaultNode
//        
//        /* leaf 노드를 branch 노드로 변경 */
//        defaultNode = defaultNodeStored;
//        
//        defaultNode.setC_type("folder");
//        
//        coreService.alterNodeType(defaultNode);
//        defaultNode = null;
//        
//        ComprehensiveTree folderNode2Stored = coreService.getChildNode(folderNodeStored).get(0);
//        
//        assertEquals(folderNode2Stored.getC_type(), "folder");
//        
//        assertSame(folderNode2Stored.getC_id(), defaultNodeStored.getC_id());
//        assertSame(folderNode2Stored.getC_left(), defaultNodeStored.getC_left());
//        assertSame(folderNode2Stored.getC_right(), defaultNodeStored.getC_right());
//        assertSame(folderNode2Stored.getC_position(), defaultNodeStored.getC_position());
//        assertEquals(folderNode2Stored.getC_title(), defaultNodeStored.getC_title());
//        assertSame(folderNode2Stored.getC_parentid(), defaultNodeStored.getC_parentid());
//        
//        assertSame(rootNodeStored.getC_left(), 1);
//        assertSame(rootNodeStored.getC_right(), 8);
//        
//        assertSame(firstChildNodeStored.getC_left(), 2);
//        assertSame(firstChildNodeStored.getC_right(), 7);
//        
//        assertSame(folderNodeStored.getC_left(), 3);
//        assertSame(folderNodeStored.getC_right(), 6);
//        
//        defaultNodeStored = null;
//        
////      I|    L      R
////      1|    1      8 : Root Node
////      2|     2    7  : First Child Node
////      4|      3  6   : folderNode
////      5|       45    : folderNode2
    }
    
    @Test
    public void simpleNegativeAddNode() throws Exception {
        
//        int position = mockCoreDao.generatePosition(firstChildNodeStored);
//        
//        ComprehensiveTree defaultNode = new ComprehensiveTree();
//        defaultNode.setC_type("default");
//        defaultNode.setC_position(position);
//        defaultNode.setC_title("defaultNode");
//        defaultNode.setRef(firstChildNodeStored.getC_id());
//        
//        coreService.addNode(defaultNode);
    }
}