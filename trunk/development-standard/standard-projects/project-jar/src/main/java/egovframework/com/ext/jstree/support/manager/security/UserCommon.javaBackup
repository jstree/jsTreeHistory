package egovframework.com.ext.jstree.support.manager.security;

import java.util.Collection;
import java.util.Date;
import java.util.Set;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;


public class UserCommon implements UserDetails {
    
    private static final long serialVersionUID = 7740913274665881107L;
    
    private Set<GrantedAuthority> authorities;
    private Member member = new Member();
    private User user = new User();
    private String ip;
    private Date lastLoginDate;
    private boolean accountNonLocked = true;
    private boolean tmLogin = true;
    
    public UserCommon() {
    }
    
    public UserCommon(Member member, Set<GrantedAuthority> grantedAuthorities, String ip) {
        this.member = member;
        this.authorities = grantedAuthorities;
        this.ip = ip;
        this.tmLogin = true;
    }
    
    public UserCommon(User user, Set<GrantedAuthority> grantedAuthorities, String ip) {
        this.user = user;
        this.authorities = grantedAuthorities;
        this.ip = ip;
    }
    
    @Override
    public int hashCode() {
        if (isTmLogin() == false){
            return new Long(getUser().getId()).intValue();
        }
        return new Long(member.getId()).intValue();
    }
    
    @Override
    public boolean equals(Object arg0) {
        UserCommon user = (UserCommon) arg0;
        if (isTmLogin() == false){
            if (user.getUser().getId() == getUser().getId()){
                return true;
            }
            return false;
        }
        if (user.getMember().getId() == member.getId()) {
            return true;
        }
        
        return false;
    }
    
    public boolean isReadonly() {
        for (GrantedAuthority grantedAuthority : authorities) {
            CustomGrantedAuthority authority = (CustomGrantedAuthority) grantedAuthority;
            if (authority.getAuthrity().equals(RolesForSecurity.ROLE_READ)) {
                return true;
            }
        }
        
        return false;
    }
    
    @Override
    public Collection<GrantedAuthority> getAuthorities() {
        return authorities;
    }
    
    @Override
    public String getPassword() {
        if (tmLogin) {
            return member.getPassword(); 
        } else {
            return user.getPassword();
        }
    }
    
    @Override
    public String getUsername() {
        if (tmLogin) {
            return member.getViewId(); 
        } else {
            return user.getViewId();
        }
    }
    
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }
    
    @Override
    public boolean isAccountNonLocked() {
        return this.accountNonLocked;
    }
    
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }
    
    @Override
    public boolean isEnabled() {
        return !member.isBlock();
    }
    
    public String getName() {
        if (tmLogin) {
            return member.getName(); 
        } else {
            return user.getName();
        }
    }
    
    public long getId() {
        if (tmLogin) {
            return member.getId(); 
        } else {
            return user.getId();
        }
    }
    
    public Member getMember() {
        return this.member;
    }
    
    public void setMember(Member member) {
        this.member = member;
    }
    
    public String getIp() {
        return ip;
    }
    
    public void setIp(String ip) {
        this.ip = ip;
    }
    
    public Date getLastLoginDate() {
        return lastLoginDate;
    }

    public void setLastLoginDate(Date lastLoginDate) {
        this.lastLoginDate = lastLoginDate;
    }

    public User getUser() {
        return user;
    }
    
    public void setUser(User user) {
        this.user = user;
    }
    
    public boolean isTmLogin() {
        return tmLogin;
    }
    
    public void setTmLogin(boolean tmLogin) {
        this.tmLogin = tmLogin;
    }
    
    public void setAccountNonLocked(boolean accountNonLocked) {
        this.accountNonLocked = accountNonLocked;
    }
    
}