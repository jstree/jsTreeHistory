<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="secureUserLoginState">

	<typeAlias alias="SecureUserLoginState" type="egovframework.com.ext.jstree.support.manager.security.login.vo.SecureUserLoginState" />

	<sql id="getMetaField">
		/* getChildNode */
		SELECT A.C_ID
			 , A.C_PARENTID
			 , A.C_POSITION
			 , A.C_LEFT
			 , A.C_RIGHT
			 , A.C_LEVEL
			 , A.C_TITLE
			 , A.C_TYPE
			 , A.C_USER_ID		AS userId
			 , A.C_MAC_ADDRESS	AS macAddress
			 , A.C_IP_ADDRESS	AS ipAddress
			 , A.C_LOGIN_DT		AS loginDt
	</sql>
	<sql id="getInlineChildCount">
			 , ( SELECT CASE WHEN COUNT(*) &gt; 0 THEN 'InChild'
				 								  ELSE 'NoChild'
							 					  END AS YesNo
			/* inline table from filed add point*/
	</sql>
	<sql id="getInlineChildCountAfterFrom">
		 WHERE B.C_PARENTID = A.C_ID ) AS childcount
		/* table from filed add point*/
	</sql>
	<sql id="getAfterFrom">
		 WHERE A.C_PARENTID = #c_id#
	  ORDER BY A.C_POSITION ASC
	</sql>

	<select id="getChildNode" parameterClass="SecureUserLoginState" resultClass="SecureUserLoginState">
		<dynamic>
			<include refid="getMetaField" />
			/* User filed */
			<include refid="getInlineChildCount" />
			/* inline table from filed*/
			FROM T_USER_LOGIN_STATE B
			<include refid="getInlineChildCountAfterFrom" />
			/* table from filed*/
			FROM T_USER_LOGIN_STATE A
			<include refid="getAfterFrom" />
		</dynamic>
	</select>

	<select id="getChildNodeByLeftRight" parameterClass="SecureUserLoginState" resultClass="SecureUserLoginState">
		/* getChildNodeByLeftRight */
		SELECT C_ID
			 , C_PARENTID
			 , C_POSITION
			 , C_LEFT
			 , C_RIGHT
			 , C_LEVEL
			 , C_TITLE
			 , C_TYPE
			 , C_USER_ID	 AS userId
			 , C_MAC_ADDRESS AS macAddress
			 , C_IP_ADDRESS	 AS ipAddress
			 , C_LOGIN_DT	 AS loginDt
		 FROM T_USER_LOGIN_STATE
	    WHERE C_LEFT  &gt;= #c_left#
		  AND C_RIGHT &lt;= #c_right#
	    ORDER BY C_LEFT ASC
	</select>

	<select id="searchNodeByString" parameterClass="SecureUserLoginState" resultClass="SecureUserLoginState">
		/* searchNodeByString */
		SELECT C_LEFT
			 , C_RIGHT
		  FROM T_USER_LOGIN_STATE
		 WHERE C_TITLE LIKE '%'||#searchStr#||'%'
	</select>
	

	<select id="searchNodeByPosition" parameterClass="java.util.List" resultClass="String">
		/* searchNodeByPosition */
		SELECT DISTINCT C_ID
		  FROM T_USER_LOGIN_STATE
		 WHERE 1=1
		<iterate prepend="AND" open="(" close=")" conjunction="OR">
			   ( C_LEFT  &lt;= #[].c_left# 
		   AND   C_RIGHT &gt;= #[].c_right# )
		</iterate>
	</select>

	<update id="alterNode" parameterClass="SecureUserLoginState">
		/* alterNode */
		UPDATE T_USER_LOGIN_STATE
		   SET C_TYPE 		 = #c_type#
			 , C_TITLE 		 = #c_title#
			 , C_USER_ID 	 = #userId#
			 , C_MAC_ADDRESS = #macAddress#
			 , C_IP_ADDRESS  = #ipAddress#
			 , C_LOGIN_DT    = #loginDt#
		 WHERE C_ID = #c_id#
	</update>


	<select id="getNode" parameterClass="SecureUserLoginState" resultClass="SecureUserLoginState">
		/* getNode */
		SELECT C_ID
			 , C_PARENTID
			 , C_POSITION
			 , C_LEFT
			 , C_RIGHT
			 , C_LEVEL
			 , C_TITLE
			 , C_TYPE
			 , C_USER_ID	 AS userId
			 , C_MAC_ADDRESS AS macAddress
			 , C_IP_ADDRESS	 AS ipAddress
			 , C_LOGIN_DT	 AS loginDt
		  FROM T_USER_LOGIN_STATE
		 WHERE C_ID = #c_id#
	</select>

	<select id="getNodeByRef" parameterClass="SecureUserLoginState" resultClass="SecureUserLoginState">
		/* getNodeByRef */
		SELECT C_ID
			 , C_PARENTID
			 , C_POSITION
			 , C_LEFT
			 , C_RIGHT
			 , C_LEVEL
			 , C_TITLE
			 , C_TYPE
			 , C_USER_ID	 AS userId
			 , C_MAC_ADDRESS AS macAddress
			 , C_IP_ADDRESS	 AS ipAddress
			 , C_LOGIN_DT	 AS loginDt
		  FROM T_USER_LOGIN_STATE
		 WHERE C_ID = #ref#
	</select>

	<delete id="removeNode" parameterClass="SecureUserLoginState">
		/* removeNode */
		DELETE 
			FROM T_USER_LOGIN_STATE
		   WHERE C_LEFT  &gt; = #c_left#
			 AND C_RIGHT &lt; = #c_right#
	</delete>

	<update id="removedAfterLeftFix" parameterClass="SecureUserLoginState">
		/* removedAfterLeftFix */
		UPDATE T_USER_LOGIN_STATE
		   SET C_LEFT = C_LEFT - #spaceOfTargetNode#
		 WHERE C_LEFT &gt; #c_right#
	</update>

	<update id="removedAfterRightFix" parameterClass="SecureUserLoginState">
		/* removedAfterRightFix */
		UPDATE T_USER_LOGIN_STATE
		   SET C_RIGHT = C_RIGHT - #spaceOfTargetNode#
		 WHERE C_RIGHT &gt; #c_left#
	</update>

	<update id="removedAfterPositionFix" parameterClass="SecureUserLoginState">
		/* removedAfterPositionFix */
		UPDATE T_USER_LOGIN_STATE
		   SET C_POSITION = C_POSITION - 1
		 WHERE C_PARENTID = #c_parentid#
		   AND C_POSITION &gt; #c_position#
	</update>

	<select id="analyzeRootNode" resultClass="SecureUserLoginState">
		/* searchNodeByString */
		SELECT C_LEFT
		  FROM T_USER_LOGIN_STATE
		 WHERE C_PARENTID = 0
	</select>

	<update id="cutMyselfPositionFix" parameterClass="SecureUserLoginState">
		/* cutMyselfPositionFix moveNode case. parameterClass is nodeById */
		UPDATE T_USER_LOGIN_STATE
		   SET C_POSITION = C_POSITION - 1
		 WHERE C_PARENTID = #c_parentid#
		   AND C_POSITION &gt; #c_position#
	</update>

	<update id="cutMyselfLeftFix" parameterClass="SecureUserLoginState">
		/* cutMyselfLeftFix moveNode case. parameterClass is nodeById*/
		UPDATE T_USER_LOGIN_STATE
		   SET C_LEFT = C_LEFT - #spaceOfTargetNode#
		 WHERE C_LEFT &gt; #c_right#
	</update>

	<update id="cutMyselfRightFix" parameterClass="SecureUserLoginState">
		/* cutMyselfRightFix moveNode case. parameterClass is nodeById*/
		UPDATE T_USER_LOGIN_STATE
		   SET C_RIGHT = C_RIGHT - #spaceOfTargetNode#
		 WHERE C_RIGHT &gt; #c_left#
		<iterate prepend="AND C_ID NOT IN" property="c_idsByChildNodeFromNodeById" open="(" close=")" conjunction=",">
			#c_idsByChildNodeFromNodeById[]#
		</iterate>
	</update>

	<update id="stretchPositionForMyself" parameterClass="SecureUserLoginState">
		/* stretchPositionForMyselfFromJstree */
		UPDATE T_USER_LOGIN_STATE
		   SET C_POSITION = C_POSITION + 1
		 WHERE C_PARENTID = #ref# 
		   AND C_POSITION &gt;= #c_position#
		<isEqual property="copy" compareValue="0">
			AND C_ID NOT IN
			<isEmpty property="c_idsByChildNodeFromNodeById">
				(-1)
			</isEmpty>
			<isNotEmpty property="c_idsByChildNodeFromNodeById">
				<iterate property="c_idsByChildNodeFromNodeById" open="(" close=")" conjunction=",">
					#c_idsByChildNodeFromNodeById[]#
				</iterate>
			</isNotEmpty>
		</isEqual>
	</update>

	<update id="stretchLeftForMyselfFromJstree" parameterClass="SecureUserLoginState">
		/* stretchLeftForMyselfFromJstree */
		UPDATE T_USER_LOGIN_STATE
		   SET C_LEFT = C_LEFT + #spaceOfTargetNode#
		 WHERE C_LEFT &gt;= #rightPositionFromNodeByRef#
		<isEqual property="copy" compareValue="0">
			<isNotEmpty property="c_idsByChildNodeFromNodeById">
				<iterate prepend="AND C_ID NOT IN" property="c_idsByChildNodeFromNodeById" open="(" close=")" conjunction=",">
					#c_idsByChildNodeFromNodeById[]#
				</iterate>
			</isNotEmpty>
		</isEqual>
	</update>

	<update id="stretchRightForMyselfFromJstree" parameterClass="SecureUserLoginState">
		/* stretchRightForMyselfFromJstree */
		UPDATE T_USER_LOGIN_STATE
		   SET C_RIGHT = C_RIGHT + #spaceOfTargetNode#
		 WHERE C_RIGHT &gt;= #rightPositionFromNodeByRef#
		<isEqual property="copy" compareValue="0">
			<isNotEmpty property="c_idsByChildNodeFromNodeById">
				<iterate prepend="AND C_ID NOT IN" property="c_idsByChildNodeFromNodeById" open="(" close=")" conjunction=",">
					#c_idsByChildNodeFromNodeById[]#
				</iterate>
			</isNotEmpty>
		</isEqual>
	</update>

	<insert id="pasteMyselfFromJstree" parameterClass="SecureUserLoginState">
		/* pasteMyselfFromJstree */
		INSERT 
			INTO T_USER_LOGIN_STATE 
			(
				  C_ID
				, C_PARENTID
				, C_POSITION
				, C_LEFT
				, C_RIGHT
				, C_LEVEL
				, C_TITLE
				, C_TYPE
			)
			SELECT S_USER_LOGIN_STATE.NEXTVAL AS C_ID
				 , A.*
			  FROM 
			  	 ( SELECT #ref# AS C_PARENTID
						, C_POSITION
						, C_LEFT - #idifLeft# AS C_LEFT
						, C_RIGHT -	#idifRight# AS C_RIGHT
						, C_LEVEL - #ldif# AS C_LEVEL
						, C_TITLE
						, C_TYPE
					 FROM T_USER_LOGIN_STATE
		<iterate prepend="WHERE C_ID IN" property="c_idsByChildNodeFromNodeById" open="(" close=")" conjunction=",">
			#c_idsByChildNodeFromNodeById[]#
		</iterate>
				   ORDER BY C_LEVEL DESC
				 ) A
		<selectKey resultClass="java.lang.Integer">
			/* pasteMyselfFromJstree SEQ */
			SELECT S_USER_LOGIN_STATE.CURRVAL AS SEQ
			  FROM DUAL
		</selectKey>
	</insert>

	<update id="enterMyselfFixPosition" parameterClass="SecureUserLoginState">
		/* enterMyselfFixPosition */
		UPDATE T_USER_LOGIN_STATE
		   SET C_PARENTID = #ref#
		     , C_POSITION = #c_position#
		 WHERE C_ID = #c_id#
	</update>

	<update id="enterMyselfFixLeftRight" parameterClass="SecureUserLoginState">
		/* enterMyselfFixLeftRight */
		UPDATE T_USER_LOGIN_STATE
		   SET C_LEFT  = C_LEFT  - (#idif#)
			 , C_RIGHT = C_RIGHT - (#idif#)
			 , C_LEVEL = C_LEVEL - (#ldif#)
		<iterate prepend="WHERE C_ID IN" property="c_idsByChildNodeFromNodeById"
			open="(" close=")" conjunction=",">
			#c_idsByChildNodeFromNodeById[]#
		</iterate>
	</update>

	<insert id="addMyselfFromJstree" parameterClass="SecureUserLoginState">
		/* addMyselfFromJstree */
		INSERT 
			INTO T_USER_LOGIN_STATE 
			(
				  C_ID
				, C_PARENTID
				, C_POSITION
				, C_LEFT
				, C_RIGHT
				, C_LEVEL
				, C_TITLE
				, C_USER_ID
				, C_MAC_ADDRESS
				, C_IP_ADDRESS
				, C_LOGIN_DT
			)
			VALUES 
			(
				  S_USER_LOGIN_STATE.NEXTVAL
				, #c_parentid#
				, #c_position#
				, #c_left#
				, #c_right#
				, #c_level#
				, #c_title#
				, #userId#
				, #macAddress#
				, #ipAddress#
				, #loginDt#
			)
		<selectKey resultClass="java.lang.Integer">
			/* addMyselfFromJstree SEQ */
			SELECT S_USER_LOGIN_STATE.CURRVAL AS SEQ
			  FROM DUAL
		</selectKey>
	</insert>

	<update id="alterNodeType" parameterClass="SecureUserLoginState">
		/* alterNodeType */
		UPDATE T_USER_LOGIN_STATE
		   SET C_TYPE = #c_type#
		 WHERE C_ID = #c_id#
	</update>

	<update id="fixCopyIF" parameterClass="SecureUserLoginState">
		/* fixCopyIF */
		UPDATE T_USER_LOGIN_STATE
		   SET C_POSITION = #fixCopyPosition#
		 WHERE C_ID	= #fixCopyId#
	</update>

	<update id="fixCopy" parameterClass="SecureUserLoginState">
		/* fixCopy */
		UPDATE T_USER_LOGIN_STATE
		   SET C_PARENTID = #fixCopyId#
		 WHERE C_ID = #c_id#
	</update>

</sqlMap>